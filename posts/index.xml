<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on theoriz0's blog</title><link>https://theoriz0.github.io/posts/</link><description>Recent content in Posts on theoriz0's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 05 Nov 2023 16:45:52 +0800</lastBuildDate><atom:link href="https://theoriz0.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>My Git Cheatsheet</title><link>https://theoriz0.github.io/posts/my-git-cheatsheet/</link><pubDate>Sun, 05 Nov 2023 16:45:52 +0800</pubDate><guid>https://theoriz0.github.io/posts/my-git-cheatsheet/</guid><description>git stash save &amp;ldquo;save message&amp;rdquo; : 执行暂存 （1）git stash save &amp;ldquo;save message&amp;rdquo; : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。
（2）git stash list ：查看stash了哪些存储
（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}
（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show stash@{$num} -p ，比如第二个：git stash show stash@{1} -p
（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1}
（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}
（7）git stash drop stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储</description><content>&lt;p>git stash save &amp;ldquo;save message&amp;rdquo; : 执行暂存
（1）git stash save &amp;ldquo;save message&amp;rdquo; : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。&lt;/p>
&lt;p>（2）git stash list ：查看stash了哪些存储&lt;/p>
&lt;p>（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}&lt;/p>
&lt;p>（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show stash@{$num} -p ，比如第二个：git stash show stash@{1} -p&lt;/p>
&lt;p>（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1}&lt;/p>
&lt;p>（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}&lt;/p>
&lt;p>（7）git stash drop stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储&lt;/p>
&lt;p>（8）git stash clear ：删除所有缓存的stash&lt;/p>
&lt;p>没有在git 版本控制中的文件，是不能被git stash 存起来的。如果新文件需要暂存，先执行下git add 加到git版本控制中。&lt;/p>
&lt;p>git checkout 不会清除不冲突的文件？
如果要清除：git clean -xdf
-n 不实际删除，只是进行演练，展示将要进行的操作，有哪些文件将要被删除。（可先使用该命令参数，然后再决定是否执行）&lt;/p>
&lt;p>git reset &amp;ndash;hard HASH #返回到某个节点，不保留修改，已有的改动会丢失。
git reset &amp;ndash;soft HASH #返回到某个节点, 保留修改，已有的改动会保留，在未提交中，git status或git diff可看。&lt;/p>
&lt;p>submodule
git clone &amp;ndash;recurse-submodules, or run git submodule update &amp;ndash;init &amp;ndash;recursive&lt;/p></content></item><item><title>常用的一些应用</title><link>https://theoriz0.github.io/posts/my-tool-apps/</link><pubDate>Sun, 05 Nov 2023 16:35:24 +0800</pubDate><guid>https://theoriz0.github.io/posts/my-tool-apps/</guid><description/><content/></item><item><title>自有数据：我的私有云</title><link>https://theoriz0.github.io/posts/my-private-clouds/</link><pubDate>Sun, 05 Nov 2023 16:28:35 +0800</pubDate><guid>https://theoriz0.github.io/posts/my-private-clouds/</guid><description>音乐 很多歌音乐由于被屏蔽/版权/地域原因未上架，所以建了ampache。客户端使用的是 Amperfy。 这样只要买apple music一个会员就可以了，不必在QQ/网易/Spotify之间来回切。 用了vmiss香港节点，因为便宜带宽大、流量多。国内免费的服务器那点带宽带流媒体卡的让人怀疑人生。
Blog Hugo + github.io
类Twitter 想用Mongo的 Data API免费额度 + Netlify的免费额度，部署一个极简的twitter。自己部署的最大优势是未来整理时可以直接操作数据库，比在WebUI里来回请求http会快很多。</description><content>&lt;h2 id="音乐">音乐&lt;/h2>
&lt;p>很多歌音乐由于被屏蔽/版权/地域原因未上架，所以建了ampache。客户端使用的是 Amperfy。
这样只要买apple music一个会员就可以了，不必在QQ/网易/Spotify之间来回切。
用了vmiss香港节点，因为便宜带宽大、流量多。国内免费的服务器那点带宽带流媒体卡的让人怀疑人生。&lt;/p>
&lt;h2 id="blog">Blog&lt;/h2>
&lt;p>Hugo + github.io&lt;/p>
&lt;h2 id="类twitter">类Twitter&lt;/h2>
&lt;p>想用Mongo的 Data API免费额度 + Netlify的免费额度，部署一个极简的twitter。自己部署的最大优势是未来整理时可以直接操作数据库，比在WebUI里来回请求http会快很多。&lt;/p></content></item><item><title>My Hugo Cheatsheet</title><link>https://theoriz0.github.io/posts/my-hugo-cheatsheet/</link><pubDate>Sun, 05 Nov 2023 16:09:58 +0800</pubDate><guid>https://theoriz0.github.io/posts/my-hugo-cheatsheet/</guid><description>安装 Hugo：
Hugo - Install
go install -tags extended github.com/gohugoio/hugo@latest Mac 也可以使用Brew，省去配置
brew install hugo 使用 Hugo
hugo new posts/your-post.md hugo serve</description><content>&lt;p>安装 Hugo：&lt;/p>
&lt;p>&lt;a href="https://gohugo.io/installation/">Hugo - Install&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go install -tags extended github.com/gohugoio/hugo@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Mac 也可以使用Brew，省去配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install hugo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 Hugo&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo new posts/your-post.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo serve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>60 Points First</title><link>https://theoriz0.github.io/posts/60-points-first/</link><pubDate>Sun, 05 Nov 2023 16:04:12 +0800</pubDate><guid>https://theoriz0.github.io/posts/60-points-first/</guid><description>https://www.bilibili.com/video/BV11H4y1R7Pm/ 我的加州理工教授告诉我60分更重要 硅谷有一句名言叫 move fast and break things 意思就是说要快速的行动 即便事情会被搞砸 每个人每天都有很多事情要执行 但是执行起来会很慢 因为感觉自己所具备条件不够完美 或者计划还不够周全 就会担心失败 担心做不到100分 所以迟迟都不会行动 其实我在刚开始读博的时候 每次做一件事情之前都喜欢暗示自己 要尽可能做到完美 这样最大影响就是给自己不必要的压力 让自己迟迟不能开始行动 其实100分根本不重要 60分才重要 因为60分至少让你有开始行动的动力 做一件100分事情的经历 可以帮你完成5件60分的事情 哪个对你帮助会更大呢
完美重要吗？比如这篇文章的markdown排版。 事情很多的时候更要把精力集中在重要的事情上。
过早优化是万恶之源 —— 克努特优化原则。</description><content>&lt;p>&lt;a href="https://www.bilibili.com/video/BV11H4y1R7Pm/">https://www.bilibili.com/video/BV11H4y1R7Pm/&lt;/a>
我的加州理工教授告诉我60分更重要
硅谷有一句名言叫
move fast and break things
意思就是说要快速的行动
即便事情会被搞砸
每个人每天都有很多事情要执行
但是执行起来会很慢
因为感觉自己所具备条件不够完美
或者计划还不够周全
就会担心失败
担心做不到100分
所以迟迟都不会行动
其实我在刚开始读博的时候
每次做一件事情之前都喜欢暗示自己
要尽可能做到完美
这样最大影响就是给自己不必要的压力
让自己迟迟不能开始行动
其实100分根本不重要
60分才重要
因为60分至少让你有开始行动的动力
做一件100分事情的经历
可以帮你完成5件60分的事情
哪个对你帮助会更大呢&lt;/p>
&lt;p>完美重要吗？比如这篇文章的markdown排版。
事情很多的时候更要把精力集中在重要的事情上。&lt;/p>
&lt;p>过早优化是万恶之源 —— 克努特优化原则。&lt;/p></content></item><item><title>My FFmpeg Cheatsheet</title><link>https://theoriz0.github.io/posts/my-ffmpeg-cheatsheet/</link><pubDate>Sun, 05 Nov 2023 15:45:31 +0800</pubDate><guid>https://theoriz0.github.io/posts/my-ffmpeg-cheatsheet/</guid><description>ffmpeg 格式转换 ffmpeg -i A.mkv A.mp4 复制流 ffmpeg -i input.mkv -codec copy output.mp4 视频转换音频 $ ffmpeg -i .\Revenge.webm demo.mp3 #将 Revenge.webm 这个 MV 转换成了 mp3 歌曲 抽取音频命令 ffmpeg -i 3.mp4 -vn -y -acodec copy 3.aac ffmpeg -i 3.mp4 -vn -y -acodec copy 3.m4a 剪切 ffmpeg -ss 00:00:00 -t 00:00:30 -i test.mp4 -vcodec copy -acodec copy output.mp4 * -ss 指定从什么时间开始 * -t 指定需要截取多长时间 * -i 指定输入文件 合并（非 MPEG-1, MPEG-2 PS, DV) Use this method when you want to avoid a re-encode and your format does not support file-level concatenation (most files used by general users do not support file-level concatenation).</description><content>&lt;h1 id="ffmpeg">ffmpeg&lt;/h1>
&lt;h2 id="格式转换">格式转换&lt;/h2>
&lt;pre tabindex="0">&lt;code>ffmpeg -i A.mkv A.mp4
&lt;/code>&lt;/pre>&lt;h2 id="复制流">复制流&lt;/h2>
&lt;pre tabindex="0">&lt;code>ffmpeg -i input.mkv -codec copy output.mp4
&lt;/code>&lt;/pre>&lt;h2 id="视频转换音频">视频转换音频&lt;/h2>
&lt;pre tabindex="0">&lt;code>$ ffmpeg -i .\Revenge.webm demo.mp3 #将 Revenge.webm 这个 MV 转换成了 mp3 歌曲
&lt;/code>&lt;/pre>&lt;h2 id="抽取音频命令">抽取音频命令&lt;/h2>
&lt;pre tabindex="0">&lt;code>ffmpeg -i 3.mp4 -vn -y -acodec copy 3.aac
ffmpeg -i 3.mp4 -vn -y -acodec copy 3.m4a
&lt;/code>&lt;/pre>&lt;h2 id="剪切">剪切&lt;/h2>
&lt;pre tabindex="0">&lt;code>ffmpeg -ss 00:00:00 -t 00:00:30 -i test.mp4 -vcodec copy -acodec copy output.mp4
* -ss 指定从什么时间开始
* -t 指定需要截取多长时间
* -i 指定输入文件
&lt;/code>&lt;/pre>&lt;h2 id="合并非-mpeg-1-mpeg-2-ps-dv">合并（非 MPEG-1, MPEG-2 PS, DV)&lt;/h2>
&lt;p>Use this method when you want to avoid a re-encode and your format does not support file-level concatenation (most files used by general users do not support file-level concatenation).&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat mylist.txt
file &amp;#39;/path/to/file1&amp;#39;
file &amp;#39;/path/to/file2&amp;#39;
file &amp;#39;/path/to/file3&amp;#39;
$ ffmpeg -f concat -safe 0 -i mylist.txt -c copy output.mp4
&lt;/code>&lt;/pre>&lt;p>For Windows:&lt;/p>
&lt;pre tabindex="0">&lt;code>(echo file &amp;#39;first file.mp4&amp;#39; &amp;amp; echo file &amp;#39;second file.mp4&amp;#39; )&amp;gt;list.txt
ffmpeg -safe 0 -f concat -i list.txt -c copy output.mp4
&lt;/code>&lt;/pre>&lt;h2 id="合并-mpeg-1-mpeg-2-ps-dv">合并 (MPEG-1, MPEG-2 PS, DV)&lt;/h2>
&lt;p>Use this method with formats that support file-level concatenation (MPEG-1, MPEG-2 PS, DV). Do not use with MP4.&lt;/p>
&lt;pre tabindex="0">&lt;code>ffmpeg -i &amp;#34;concat:input1|input2&amp;#34; -codec copy output.mkv
&lt;/code>&lt;/pre>&lt;p>This method does not work for many formats, including MP4, due to the nature of these formats and the simplistic concatenation performed by this method.&lt;/p>
&lt;pre tabindex="0">&lt;code>ffmpeg -i input.flv -q:a 5 out.mp3
&lt;/code>&lt;/pre>&lt;p>flv 提取mp3&lt;/p>
&lt;h2 id="merge-m4s-video-and-audio">merge m4s video and audio&lt;/h2>
&lt;pre tabindex="0">&lt;code>ffmpeg -i video.m4s -i audio.m4s -c:v copy -c:a copy output.mp4
&lt;/code>&lt;/pre></content></item><item><title>Golang WSL2 CentOS8 开发环境配置指南</title><link>https://theoriz0.github.io/posts/golang-wsl2-centos8-setup/</link><pubDate>Wed, 11 Jan 2023 22:32:58 +0800</pubDate><guid>https://theoriz0.github.io/posts/golang-wsl2-centos8-setup/</guid><description>获取 WSL CentOS8 mishamosher/CentOS-WSL
安装并启动 CentOS8 解压并运行CentOS8.exe。
Windows 命令行下运行：
## 列出所有版本，确认 CentOS8 已安装成功 wsl --list ## 如果有多个发行版，可以将默认版本设为 CentOS8 wsl -s CentOS8 ## 启动。如果设置了默认版本，可以忽略 wsl -d CentOS8 设置 root 用户密码 passwd root 创建普通用户并加入sudo组 useradd [username] passwd [username] sed -i &amp;#39;/^root.*ALL=(ALL).*ALL/a\[username]\tALL=(ALL) \tALL&amp;#39; /etc/sudoers 替换 yum 源 mv /etc/yum.repos.d /etc/yum.repos.d.bak # 先备份原有的 Yum 源 mkdir /etc/yum.repos.d curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo yum clean all &amp;amp;&amp;amp; yum makecache 修改 WSL 默认用户 WSL 下：
vi /etc/wsl.conf 文件内容为：</description><content>&lt;h2 id="获取-wsl-centos8">获取 WSL CentOS8&lt;/h2>
&lt;p>&lt;a href="https://github.com/mishamosher/CentOS-WSL">mishamosher/CentOS-WSL&lt;/a>&lt;/p>
&lt;h2 id="安装并启动-centos8">安装并启动 CentOS8&lt;/h2>
&lt;p>解压并运行&lt;code>CentOS8.exe&lt;/code>。&lt;/p>
&lt;p>Windows 命令行下运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 列出所有版本，确认 CentOS8 已安装成功&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 如果有多个发行版，可以将默认版本设为 CentOS8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl -s CentOS8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 启动。如果设置了默认版本，可以忽略&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl -d CentOS8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="设置-root-用户密码">设置 root 用户密码&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>passwd root
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建普通用户并加入sudo组">创建普通用户并加入sudo组&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>useradd &lt;span style="color:#f92672">[&lt;/span>username&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>passwd &lt;span style="color:#f92672">[&lt;/span>username&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sed -i &lt;span style="color:#e6db74">&amp;#39;/^root.*ALL=(ALL).*ALL/a\[username]\tALL=(ALL) \tALL&amp;#39;&lt;/span> /etc/sudoers
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="替换-yum-源">替换 yum 源&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mv /etc/yum.repos.d /etc/yum.repos.d.bak &lt;span style="color:#75715e"># 先备份原有的 Yum 源&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir /etc/yum.repos.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yum clean all &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> yum makecache
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="修改-wsl-默认用户">修改 WSL 默认用户&lt;/h2>
&lt;p>WSL 下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vi /etc/wsl.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>文件内容为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>[user]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default=[username]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存后退出WSL，并在 Windows 下运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wsl --terminate CentOS8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重新启动 WSL，可以发现用户已经是所设置用户而不是root。&lt;/p>
&lt;h2 id="获取-windows-主机网络地址">获取 Windows 主机网络地址&lt;/h2>
&lt;p>WSL下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat /etc/resolv.conf |grep -oP &lt;span style="color:#e6db74">&amp;#39;(?&amp;lt;=nameserver\ ).*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>尝试ping该地址。&lt;/p>
&lt;p>如果不通，尝试在 Windows powershell 下放开 vEthernet (WSL) 这张网卡的防火墙，执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>New-NetFirewallRule -DisplayName &lt;span style="color:#e6db74">&amp;#34;WSL&amp;#34;&lt;/span> -Direction Inbound -InterfaceAlias &lt;span style="color:#e6db74">&amp;#34;vEthernet (WSL)&amp;#34;&lt;/span> -Action Allow
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置-homebashrc">配置 &lt;code>$HOME/.bashrc&lt;/code>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># .bashrc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Source global definitions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -f /etc/bashrc &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . /etc/bashrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># User specific environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> ! &lt;span style="color:#f92672">[[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$PATH&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span>~ &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$HOME&lt;span style="color:#e6db74">/.local/bin:&lt;/span>$HOME&lt;span style="color:#e6db74">/bin:&amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$HOME&lt;span style="color:#e6db74">/.local/bin:&lt;/span>$HOME&lt;span style="color:#e6db74">/bin:&lt;/span>$PATH&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export PATH
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Uncomment the following line if you don&amp;#39;t like systemctl&amp;#39;s auto-paging feature:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># export SYSTEMD_PAGER=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># User specific aliases and functions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alias rm&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;rm -i&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alias cp&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cp -i&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alias mv&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;mv -i&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Create workspace folder if not exist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> ! -d $HOME/workspace &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mkdir -p $HOME/workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Basic envs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export LANG&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;en_US.UTF-8&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 设置系统语言为 en_US.UTF-8，避免终端出现中文乱码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export PS1&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;[\u@dev \W]$ &amp;#39;&lt;/span> &lt;span style="color:#75715e"># 默认的 PS1 设置会展示全部的路径，为了防止过长，这里只展示：&amp;#34;用户名@dev 最后的目录名&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export WORKSPACE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$HOME&lt;span style="color:#e6db74">/workspace&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 设置工作目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Default entry folder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd $WORKSPACE &lt;span style="color:#75715e"># 登录系统，默认进入 workspace 目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Go envs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GOVERSION&lt;span style="color:#f92672">=&lt;/span>go1.19.4 &lt;span style="color:#75715e"># Go 版本设置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GO_INSTALL_DIR&lt;span style="color:#f92672">=&lt;/span>/usr/local/go &lt;span style="color:#75715e"># Go 安装目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GOROOT&lt;span style="color:#f92672">=&lt;/span>$GO_INSTALL_DIR/$GOVERSION &lt;span style="color:#75715e"># GOROOT 设置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GOPATH&lt;span style="color:#f92672">=&lt;/span>$WORKSPACE/golang &lt;span style="color:#75715e"># GOPATH 设置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export PATH&lt;span style="color:#f92672">=&lt;/span>$GOROOT/bin:$GOPATH/bin:$PATH &lt;span style="color:#75715e"># 将 Go 语言自带的和通过 go install 安装的二进制文件加入到 PATH 路径中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GO111MODULE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;on&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 开启 Go moudles 特性&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GOPROXY&lt;span style="color:#f92672">=&lt;/span>https://goproxy.cn,direct &lt;span style="color:#75715e"># 安装 Go 模块时，代理服务器设置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GOPRIVATE&lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GOSUMDB&lt;span style="color:#f92672">=&lt;/span>off &lt;span style="color:#75715e"># 关闭校验 Go 依赖包的哈希值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># proxy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alias proxy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;source ~/proxy.sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy set
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置clash或其他代理软件">配置clash或其他代理软件&lt;/h3>
&lt;p>详细可参考：&lt;a href="https://www.cnblogs.com/tuilk/p/16287472.html">WSL2配置代理&lt;/a>&lt;/p>
&lt;p>开启代理软件的【allow lan/局域网】功能。&lt;/p>
&lt;p>WSL 下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export ALL_PROXY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://{ip}:{port}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 尝试访问google&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl google.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果不通，检查 Windows 下 clash 防火墙设置。&lt;/p>
&lt;p>如果成功，可以继续配置 &lt;code>proxy.sh&lt;/code> 方便后续使用 ,修改代理端口号为你代理软件的端口号。&lt;/p>
&lt;p>创建 &lt;code>proxy.sh&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vi ~/proxy.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>内容为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>hostip&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>cat /etc/resolv.conf | grep nameserver | awk &lt;span style="color:#e6db74">&amp;#39;{ print $2 }&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wslip&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>hostname -I | awk &lt;span style="color:#e6db74">&amp;#39;{print $1}&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>port&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">7890&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PROXY_HTTP&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>hostip&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>port&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set_proxy&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> export http_proxy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>PROXY_HTTP&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> export HTTP_PROXY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>PROXY_HTTP&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> export https_proxy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>PROXY_HTTP&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> export HTTPS_proxy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>PROXY_HTTP&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> export ALL_PROXY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>PROXY_SOCKS5&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> export all_proxy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>PROXY_SOCKS5&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git config --global http.https://github.com.proxy &lt;span style="color:#e6db74">${&lt;/span>PROXY_HTTP&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git config --global https.https://github.com.proxy &lt;span style="color:#e6db74">${&lt;/span>PROXY_HTTP&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Proxy has been opened.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unset_proxy&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unset http_proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unset HTTP_PROXY
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unset https_proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unset HTTPS_PROXY
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unset ALL_PROXY
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unset all_proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git config --global --unset http.https://github.com.proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git config --global --unset https.https://github.com.proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Proxy has been closed.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ip&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;WSL IP:&amp;#34;&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>wslip&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Host IP:&amp;#34;&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>hostip&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>test_setting&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Host IP:&amp;#34;&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>hostip&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;WSL IP:&amp;#34;&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>wslip&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Try to connect to Google...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>curl -I -s --connect-timeout &lt;span style="color:#ae81ff">5&lt;/span> -m &lt;span style="color:#ae81ff">5&lt;/span> -w &lt;span style="color:#e6db74">&amp;#34;%{http_code}&amp;#34;&lt;/span> -o /dev/null www.google.com&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>resp&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Proxy setup succeeded!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Proxy setup failed!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;set&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> set_proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">elif&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;unset&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unset_proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">elif&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> test_setting
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">elif&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ip&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Unsupported arguments.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使&lt;code>.bashrc&lt;/code>生效&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>source ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 yum 失败，可尝试关闭代理。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>proxy unset
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装常用依赖">安装常用依赖&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo yum -y install git make autoconf automake cmake perl-CPAN libcurl-devel libtool gcc gcc-c++ glibc-headers zlib-devel git-lfs telnet lrzsz jq expat-devel openssl-devel openssl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装go环境">安装go环境&lt;/h2>
&lt;p>（如果不需要 go 环境，可删去 .bashrc 的 GO 部分）&lt;/p>
&lt;p>确认.bashrc的$GOVERSION，如果安装不同版本，修改之。&lt;/p>
&lt;p>按照go官网下载go。&lt;a href="https://go.dev/dl/">Go官网下载地址&lt;/a>&lt;/p>
&lt;p>解压:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>rm -rf /usr/local/go &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> tar -C /usr/local/go/$GOVERSION -xzf go1.19.4.linux-amd64.tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>详见 &lt;a href="https://go.dev/doc/install">Go官网安装指南&lt;/a>。&lt;/p>
&lt;p>此时 go version应该能输出版本。&lt;/p>
&lt;h3 id="安装protoc">安装protoc&lt;/h3>
&lt;p>（最新版本在(github.com)[https://github.com/protocolbuffers/protobuf/releases)，可根据需要自行调整命令)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd /tmp/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wget https://github.com/protocolbuffers/protobuf/releases/download/v21.9/protobuf-cpp-3.21.9.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tar -xvzf protobuf-cpp-3.21.9.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd protobuf-3.21.9/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./autogen.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./configure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo make install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>protoc --version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在执行 autogen.sh 脚本时，如果遇到以下错误：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>configure.ac:48: installing &amp;#39;./install-sh&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>configure.ac:109: error: required file &amp;#39;./ltmain.sh&amp;#39; not found configure.ac:48: installing &amp;#39;./missing&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>benchmarks/Makefile.am: installing &amp;#39;./depcomp&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conformance/Makefile.am:362: warning: shell python --version 2&amp;gt;&amp;amp;1: non-POSIX variable name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conformance/Makefile.am:362: (probably a GNU make extension)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conformance/Makefile.am:372: warning: shell python --version 2&amp;gt;&amp;amp;1: non-POSIX variable name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conformance/Makefile.am:372: (probably a GNU make extension)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parallel-tests: installing &amp;#39;./test-driver&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>autoreconf: automake failed with exit status: 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以通过以下命令配置 libtoolize，并再次运行 autogen.sh 来解决：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>libtoolize --automake --copy --debug --force
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./autogen.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装配置-docker">安装配置 Docker&lt;/h2>
&lt;p>安装 docker desktop&lt;/p>
&lt;p>检查 docker desktop 设置，确保：&lt;/p>
&lt;ul>
&lt;li>&lt;code>General - Use the WSL2 ...&lt;/code> 选中&lt;/li>
&lt;li>&lt;code>Resource - WSL Integration：Enable integration...&lt;/code> 选中；指定的 WSL Distro（CentOS8）开关打开。&lt;/li>
&lt;/ul>
&lt;p>如果报 &lt;code>Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock&lt;/code>，可运行以下语句设置权限：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo setfacl --modify user:&amp;lt;user name or ID&amp;gt;:rw /var/run/docker.sock
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(来源：&lt;a href="https://stackoverflow.com/questions/51342810/how-to-fix-dial-unix-var-run-docker-sock-connect-permission-denied-when-gro">StackOverflow&lt;/a>)&lt;/p>
&lt;p>如果报&lt;code>failed to solve with frontend dockerfile.v0: failed to create LLB definition&lt;/code>，需在 docker desktop 中配置:&lt;/p>
&lt;ul>
&lt;li>docker engine: &lt;code>&amp;quot;features&amp;quot;: {&amp;quot;buildkit&amp;quot;: false },&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>并重新用&lt;code>setfacl&lt;/code>设置权限&lt;/p>
&lt;p>（来源：&lt;a href="https://blog.csdn.net/qq_41240287/article/details/125236997">CSDN&lt;/a>）&lt;/p>
&lt;h2 id="创建默认-k8s-环境">创建默认 K8S 环境&lt;/h2>
&lt;p>在 Docker Desktop 中设置：&lt;/p>
&lt;ul>
&lt;li>Kubernetes：勾选 Enable Kubernetes&lt;/li>
&lt;/ul>
&lt;p>在 WSL 中检查 K8S 服务情况：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 关闭网络代理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy unset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl cluster-info
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从 pod 中访问 WSL 资源时要使用 WSL 的 ip，而不是 localhost。获取方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>proxy ip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hostname -I | awk &lt;span style="color:#e6db74">&amp;#39;{print $1}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="其他">其他&lt;/h2>
&lt;h3 id="如果-wsl-占用内存过大">如果 WSL 占用内存过大&lt;/h3>
&lt;p>在 Windows %UserProfile%目录下修改/新建 &lt;code>.wslconfig&lt;/code>，内容为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>[wsl2]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>memory=4GB
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注：goland WSL服务端 至少需要3.8GB内存&lt;/p>
&lt;h3 id="如果域名解析有问题">如果域名解析有问题&lt;/h3>
&lt;p>可以在/etc/resolv.conf添加&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span># aliyun dns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nameserver 223.5.5.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nameserver 223.6.6.6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="不建议关闭关闭自动创建-etcresolvconf">（不建议关闭）关闭自动创建 /etc/resolv.conf&lt;/h3>
&lt;p>不建议关闭，因为 proxy.sh 脚本通过读取该文件获取 WSL 下 Windows 的 host ip。&lt;/p>
&lt;p>新建文件：/etc/wsl.conf，内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>[network]generateResolvConf = false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></content></item><item><title>关于这个博客</title><link>https://theoriz0.github.io/posts/about-this-blog/</link><pubDate>Wed, 11 Jan 2023 22:16:45 +0800</pubDate><guid>https://theoriz0.github.io/posts/about-this-blog/</guid><description>说明 博客工具：Hugo
主题：terminal</description><content>&lt;h2 id="说明">说明&lt;/h2>
&lt;p>博客工具：&lt;a href="https://gohugo.io">Hugo&lt;/a>&lt;/p>
&lt;p>主题：&lt;a href="https://github.com/panr/hugo-theme-terminal">terminal&lt;/a>&lt;/p></content></item></channel></rss>