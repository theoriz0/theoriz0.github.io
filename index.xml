<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>theoriz0's blog</title><link>https://theoriz0.github.io/</link><description>Recent content on theoriz0's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 15 Nov 2023 22:31:19 +0800</lastBuildDate><atom:link href="https://theoriz0.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>yt-dlp常用命令</title><link>https://theoriz0.github.io/posts/yt-dlp/</link><pubDate>Wed, 15 Nov 2023 22:31:19 +0800</pubDate><guid>https://theoriz0.github.io/posts/yt-dlp/</guid><description>&lt;h2 id="list-all-available-formats">list all available formats&lt;/h2>
&lt;p>&lt;code>yt-dlp -F [Link]&lt;/code>&lt;/p>
&lt;h2 id="download-and-merge-files">download (and merge) files&lt;/h2>
&lt;p>&lt;code>yt-dlp -f xx [Link]&lt;/code>
&lt;code>yt-dlp -f xx+xx [Link]&lt;/code>&lt;/p>
&lt;h2 id="with-thumbnail">with thumbnail&lt;/h2>
&lt;p>&lt;code>yt-dlp -f xx+xx --write-thumbnail [Link]&lt;/code>&lt;/p>
&lt;h2 id="other-thumbnail-params">other thumbnail params&lt;/h2>
&lt;pre tabindex="0">&lt;code>--write-thumbnail Write thumbnail image to disk
--no-write-thumbnail Do not write thumbnail image to disk (default)
--write-all-thumbnails Write all thumbnail image formats to disk
--list-thumbnails
&lt;/code>&lt;/pre></description></item><item><title>Grep 命令检索代码</title><link>https://theoriz0.github.io/posts/grep-code-searching/</link><pubDate>Wed, 15 Nov 2023 11:59:46 +0800</pubDate><guid>https://theoriz0.github.io/posts/grep-code-searching/</guid><description>&lt;h2 id="grep-常用选项介绍">Grep 常用选项介绍&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>-r&lt;/code>，递归查找&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-n&lt;/code>，搜索结果显示行号&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-i&lt;/code>，忽略大小写&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-v&lt;/code>，反向匹配&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-w&lt;/code>，匹配整个单词&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-E&lt;/code>，匹配扩展的正则表达式&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-l&lt;/code>，只打印匹配的文件名。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="递归查找并显示行号">递归查找并显示行号&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>grep -rn memcpy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>grep -rni memcpy &lt;span style="color:#75715e">#忽略大小写&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="限制文件类型或其它条件">限制文件类型或其它条件&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>grep -rn memcpy | grep -v .o.cmd &lt;span style="color:#75715e">#排除.txt文件&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>grep -rn memcpy | grep -Ev &lt;span style="color:#e6db74">&amp;#39;\.txt\.md|\.log|\.yaml&amp;#39;&lt;/span> &lt;span style="color:#75715e">#使用正则表达式排除多种类型&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>grep -rn --exclude&lt;span style="color:#f92672">=&lt;/span>*.txt memcpy &lt;span style="color:#75715e">#不在.txt中搜索&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>grep -rn --include&lt;span style="color:#f92672">=&lt;/span>*.go memcpy &lt;span style="color:#75715e">#只在.go中搜索&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="限制目录">限制目录&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>grep -rn --exclude-dir&lt;span style="color:#f92672">=&lt;/span>out memcpy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>grep -rn --exclude-dir&lt;span style="color:#f92672">=&lt;/span>out --exclude-dir&lt;span style="color:#f92672">=&lt;/span>doc memcpy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="匹配整个单词">匹配整个单词&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>grep -rnw memcpy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果想过滤&lt;code>zmemcpy&lt;/code>或者&lt;code>memcpyl&lt;/code>，但是想保留&lt;code>MCD_memcpy&lt;/code>, &lt;code>memcpy_16&lt;/code>，需要写正则表达式。&lt;/p>
&lt;h2 id="查看查找结果的上下文">查看查找结果的上下文&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>grep -rn -B &lt;span style="color:#ae81ff">3&lt;/span> -A &lt;span style="color:#ae81ff">2&lt;/span> MEMCPY &lt;span style="color:#75715e">#匹配的前三行+后两行&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="grep-配合-find">grep 配合 find&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>find . -iname Makefile -o -iname *.inc -o -iname *.mk | xargs grep -rn CFLAGS
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>管道实现的是将前面的输出stdout作为后面的输入stdin，但是有些命令不接受管道的传递方式。例如：ls，这是为什么呢？因为有些命令希望管道传递过来的是参数，但是直接使用管道有时无法传递到命令的参数位。这时候就需要xargs，xargs实现的是将管道传递过来的stdin进行处理然后传递到命令的参数位置上。&lt;/p>
&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/guyongqiangx/article/details/70161189" target="_blank" rel="noopener"
>使用grep搜索代码的几个示例&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.jianshu.com/p/676353506f0b" target="_blank" rel="noopener"
>Linux那点事-xargs命令详解&lt;/a>&lt;/p></description></item><item><title>Go Dep Management</title><link>https://theoriz0.github.io/posts/go-dep-management/</link><pubDate>Thu, 09 Nov 2023 18:07:39 +0800</pubDate><guid>https://theoriz0.github.io/posts/go-dep-management/</guid><description>&lt;p>&lt;code>Go Modules&lt;/code>是Go 语言从 1.11 版本之后官方推出的&lt;strong>版本管理&lt;/strong>工具。1.11+以后默认&lt;code>GO111MODULE=auto&lt;/code>，只要当前目录在&lt;code>$GOPATH/src&lt;/code>之外且该目录包含go.mod文件就会使用&lt;code>Go Modules&lt;/code>。&lt;/p>
&lt;p>使用modules依赖管理后：&lt;/p>
&lt;ul>
&lt;li>不需要将代码再放入$GOPATH/src&lt;/li>
&lt;li>对于已经转移的包，可以用replace在go.mod文件中替换，不需要修改代码&lt;/li>
&lt;/ul>
&lt;p>当modules 功能启用时，依赖包的存放位置为&lt;code>$GOPATH/pkg&lt;/code>，允许同一个package多个版本并存，且多个项目可以共享缓存的 module。&lt;/p>
&lt;h2 id="gomod">go.mod&lt;/h2>
&lt;h3 id="go-mod命令">&lt;code>go mod&lt;/code>命令&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>download&lt;/td>
&lt;td>download modules to local cache(下载依赖包到本地缓存)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>edit&lt;/td>
&lt;td>edit go.mod from tools or scripts (编辑go.mod)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>graph&lt;/td>
&lt;td>print module requirement graph (打印模块依赖图)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>init&lt;/td>
&lt;td>initialize new module in current directory (在当前目录初始化go.mod)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tidy&lt;/td>
&lt;td>add missing and remove unused modules(拉取缺少的模块，移除不用的模块)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>vendor&lt;/td>
&lt;td>make vendored copy of dependencies(将依赖复制到vendor下)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>verify&lt;/td>
&lt;td>verify dependencies have expected content (验证依赖是否正确)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>why&lt;/td>
&lt;td>explain why packages or modules are needed(解释为什么需要依赖)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>执行 &lt;code>go get&lt;/code>命令，在下载依赖包的同时还可以指定依赖包的版本&lt;/p>
&lt;ul>
&lt;li>运行&lt;code>go get -u&lt;/code>命令会将项目中的包升级到最新的次要版本或者修订版本&lt;/li>
&lt;li>运行&lt;code>go get -u=patch&lt;/code>命令会将项目中的包升级到最新的修订版本&lt;/li>
&lt;li>运行&lt;code>go get [包名]@[版本号]&lt;/code>命令会下载对应包的指定版本或者将对应包升级到指定的版本&lt;/li>
&lt;/ul>
&lt;p>当然我们也可以先不&lt;code>go get&lt;/code>，在最后&lt;code>go run main.go&lt;/code>时，&lt;code>go.mod&lt;/code>同样会自动查找依赖自动下载&lt;/p>
&lt;h3 id="gomod关键字">go.mod关键字&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令字&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>module&lt;/td>
&lt;td>指定包的名字（路径）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>require&lt;/td>
&lt;td>指定依赖项模块&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>replace&lt;/td>
&lt;td>替换依赖项模块&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>exclude&lt;/td>
&lt;td>忽略依赖项模块&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="gosum">go.sum&lt;/h2>
&lt;p>go.sum就是依据hash来检测下载下来的依赖，是不是和该版本依赖复合&lt;/p>
&lt;h2 id="version的确定规则">&lt;code>version&lt;/code>的确定规则&lt;/h2>
&lt;p>一、项目是否打tag？&lt;/p>
&lt;p>如果项目没有打 tag，会生成一个版本号，格式如下：&lt;br>
v0.0.0-commit日期-commitID&lt;/p>
&lt;p>比如 &lt;code>v0.0.0-20180321164747-3a771d992973&lt;/code>。&lt;/p>
&lt;p>引用一个项目的特定分支，比如 develop branch，也会生成类似的版本号：&lt;br>
v当前版本+1-commit日期-commitID&lt;/p>
&lt;p>比如 &lt;code>v1.3.4-0.20191205000432-012d92843b00&lt;/code>。&lt;/p>
&lt;p>二、项目有没有用 go module？&lt;/p>
&lt;p>如果项目有用到 go module，那么就是正常地用 tag 来作为版本号。&lt;/p>
&lt;p>比如 &lt;code>github.com/DATA-DOG/go-sqlmock v1.3.3 h1:CWUqKXe0s8A2z6qCgkP4Kru7wC11YoAnoupUKFDnH08=&lt;/code>。&lt;/p>
&lt;p>如果项目打了 tag，但是没有用到 go module，为了跟用了 go module 的项目相区别，需要加个 &lt;code>+incompatible&lt;/code> 的标志。&lt;/p>
&lt;p>比如 &lt;code>github.com/google/martian v2.1.0+incompatible/go.mod h1:9I4somxYTbIHy5NJKHRl3wXiIaQGbYVAs8BPL6v8lEs=&lt;/code>&lt;/p>
&lt;p>三、项目用的 go module 版本是不是 v2+？&lt;/p>
&lt;p>关于 go module v2+ 的特性，可以参考 Go 的官方文档：&lt;a class="link" href="https://link.juejin.cn/?target=https%3A%2F%2Fblog.golang.org%2Fv2-go-modules" title="https://link.juejin.cn?target=https%3A%2F%2Fblog.golang.org%2Fv2-go-modules"
target="_blank" rel="noopener"
>blog.golang.org/v2-go&amp;hellip;&lt;/a>。简单而言，就是通过让依赖路径带版本号后缀来区分同一个项目里不同版本的依赖，类似于 &lt;code>gopkg.in/xxx.v2&lt;/code> 的效果。&lt;/p>
&lt;p>对于使用了 v2+ go module 的项目，项目路径会有个版本号的后缀。&lt;/p>
&lt;p>比如 &lt;code>github.com/googleapis/gax-go/v2 v2.0.5 h1:sjZBwGj9Jlw33ImPtvFviGYvseOtDM7hkSKB7+Tv3SM=&lt;/code>&lt;/p>
&lt;h2 id="gowork">go.work&lt;/h2>
&lt;p>随着go 1.18版本的正式发布，多模块工作区也被引入（WorkSpaces），多模块工作区能够使开发者能够更容易地同时处理多个模块的工作， 如：方便进行依赖的代码调试(打断点、修改代码)、排查依赖代码 bug 。方便同时进行多个仓库/模块并行开发调试&lt;/p>
&lt;h4 id="go-work支持命令">&lt;code>go work&lt;/code>支持命令&lt;/h4>
&lt;ul>
&lt;li>&lt;code>go work init&lt;/code> 初始化工作区文件，用于生成go.work工作区文件&lt;/li>
&lt;li>&lt;code>go work use&lt;/code>添加新的模块到工作区&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>go work use ./example 添加一个模块到工作区&lt;/p>
&lt;p>go work use ./example ./example1 添加多个模块到工作区&lt;/p>
&lt;p>go work use -r ./example 递归./example目录到当前工作区&lt;/p>
&lt;p>删除命令: go work edit -dropuse=./example功能&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;code>go work sync&lt;/code>将工作区的构建列表同步到工作区模块&lt;/li>
&lt;li>&lt;code>go env GOWORK&lt;/code>查看环境变量，查看当前工作区文件路径，可以排查工作区文件是否设置正确，go.work路径找不到可以使用GOWORK指定&lt;/li>
&lt;/ul>
&lt;h4 id="gowork文件结构">go.work文件结构&lt;/h4>
&lt;p>go.work文件结构和go.mod文件结构类似，支持Go版本号、指定工作区和需要替代的仓库&lt;/p>
&lt;p>&lt;code>use&lt;/code>指定使用的模块目录，可以使用&lt;code>go work use&lt;/code>添加模块，也可以手动修改go.work工作区添加新的模块，在工作区中添加了模块路径，编译时会自动使用&lt;code>use&lt;/code>中的本地代码进行编译&lt;/p>
&lt;p>&lt;code>replaces&lt;/code>替换依赖仓库地址，&lt;code>replaces&lt;/code>命令与go.mod指令相同，用于替换项目中依赖的仓库地址，需要注意的是，&lt;code>replaces&lt;/code>和&lt;code>use&lt;/code>不能同时指定相同的本地代码路径&lt;/p>
&lt;h4 id="gowork文件优先级高于gomod">go.work文件优先级高于go.mod&lt;/h4>
&lt;p>在同时使用go.work和go.mod的&lt;code>replaces&lt;/code>功能时，分别指定不同的代码仓库路径，go.work优先级高于go.mod中定义&lt;/p>
&lt;pre tabindex="0">&lt;code>//go.mod 中定义替换为本地仓库 example
replace (
github.com/link1st/example =&amp;gt; ./example
)
//go.work 中定义替换为本地仓库 example1
replace (
github.com/link1st/example =&amp;gt; ./example1
)
&lt;/code>&lt;/pre>&lt;p>在代码构建时，使用的是go.work指定的example1仓库代码，go.work优先级别更高&lt;/p>
&lt;p>使用go.work时，不同的项目文件必须在有同一个根目录， 推荐在&lt;code>$GOPATH&lt;/code>路径下执行，生成go.work文件&lt;/p>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;p>&lt;a class="link" href="https://juejin.cn/post/7182091980099289147" target="_blank" rel="noopener"
>掘金文章&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://learnku.com/docs/go-mod/1.17" target="_blank" rel="noopener"
>Go Modules官方文档&lt;/a>&lt;/p></description></item><item><title>My Docker Cheatsheet</title><link>https://theoriz0.github.io/posts/my-docker-cheatsheet/</link><pubDate>Thu, 09 Nov 2023 17:19:34 +0800</pubDate><guid>https://theoriz0.github.io/posts/my-docker-cheatsheet/</guid><description>&lt;h2 id="mysql">mysql&lt;/h2>
&lt;p>安装&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run --name some-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD&lt;span style="color:#f92672">=&lt;/span>my-secret-pw -d mysql:latest &lt;span style="color:#75715e">#tag 见docker hub&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker exec -ti some-mysql /bin/bash &lt;span style="color:#75715e">## 进入docker镜像&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mysql -u root -p
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>允许任何客户端连接&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ALTER&lt;/span> &lt;span style="color:#66d9ef">USER&lt;/span> &lt;span style="color:#e6db74">&amp;#39;root&amp;#39;&lt;/span>&lt;span style="color:#f92672">@&lt;/span>&lt;span style="color:#e6db74">&amp;#39;%&amp;#39;&lt;/span> IDENTIFIED &lt;span style="color:#66d9ef">WITH&lt;/span> mysql_native_password &lt;span style="color:#66d9ef">BY&lt;/span> &lt;span style="color:#e6db74">&amp;#39;123456&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考：&lt;/p>
&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/158063202" target="_blank" rel="noopener"
>&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://hub.docker.com/_/mysql/" target="_blank" rel="noopener"
>&lt;/a>&lt;/p>
&lt;p>redis&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -p 6379:6379 --name myredis -d redis:7.0.12 --requirepass my-secret-pw
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>wsl下，会遇到提示port already in use，而并不能查到端口被占用，可以将外部端口改为16379。&lt;/p>
&lt;p>查看windows端口占用范围 &lt;a class="link" href="https://cloud.tencent.com/developer/article/2006079" target="_blank" rel="noopener"
>来源&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>netsh interface ipv4 show excludedportrange protocol&lt;span style="color:#f92672">=&lt;/span>tcp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>进入redis&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker exec -it myredis bash
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>redis-cli
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>auth my-secret-pw
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="自动重启">自动重启&lt;/h2>
&lt;p>&lt;code>docker run --restart-always&lt;/code>&lt;/p>
&lt;h2 id="查看日志">查看日志&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker logs myredis &lt;span style="color:#75715e"># 后面跟容器名 or 容器ID 都可以&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker logs --since 30m &amp;lt;容器名&amp;gt; &lt;span style="color:#75715e"># --since 30m 是查看此容器30分钟之内的日志情况。&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="docker性能损失">Docker性能损失&lt;/h2>
&lt;p>&lt;a class="link" href="https://www.v2ex.com/t/394313" target="_blank" rel="noopener"
>V2EX讨论&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>CPU 基本不会有损失。&lt;/p>
&lt;p>损失只出现在 I/O 上，包括网络 I/O 和文件系统 I/O。这两者就要看不同的实现了。&lt;/p>
&lt;p>&amp;hellip;&amp;hellip;但是对于 99% 的应用程序来说，根本不需要考虑这个损失……&lt;/p>
&lt;/blockquote></description></item><item><title>系统设计面试指南（EN）</title><link>https://theoriz0.github.io/posts/large-scale-system-design/</link><pubDate>Thu, 09 Nov 2023 16:36:29 +0800</pubDate><guid>https://theoriz0.github.io/posts/large-scale-system-design/</guid><description>&lt;h2 id="how-to-design-large-scale-systems">How to design large-scale systems&lt;/h2>
&lt;p>Step 1：Clarify the goals&lt;/p>
&lt;p>Make sure you understand the basic requirements and ask any clarifying questions.&lt;/p>
&lt;p>Step 2：Determine the scope&lt;/p>
&lt;p>Describe the feature set you&amp;rsquo;ll be discussing in the given solution, and define all of the features and their importance to the end goal.&lt;/p>
&lt;p>Step 3：Design for the right scale&lt;/p>
&lt;p>Determine the scale so you know whether the data can be supported by a single machine or if you need to scale.&lt;/p>
&lt;p>Step 4:Start simple,then iterate&lt;/p>
&lt;p>Describe the high-level process end-to-end based on your feature set and overall goals.This is a good time to discuss&lt;/p>
&lt;p>Step 5：Consider relevant DSA&lt;/p>
&lt;p>Determine which fundamental data structures and algorithms will help your system perform efficiently and appropriately.&lt;/p>
&lt;p>Step 6:Describe trade-offs&lt;/p>
&lt;p>Describe trade-offs while explaining your solution to show you understand large-scale systems and their complexities.&lt;/p>
&lt;p>*Ask clarifying questions at each step of the process!&lt;/p>
&lt;h2 id="distributed-system-fundamentals">Distributed system fundamentals&lt;/h2>
&lt;p>Data durability and consistency 持久化与一致性&lt;/p>
&lt;p>The differences and impacts of failure rates of storage solutions and corruption rates in read-write processes 读写过程中故障的概率与影响。&lt;/p>
&lt;p>Replication 主备&lt;/p>
&lt;p>Backing up data and repeating processes at scale 数据冗余与多进程集群&lt;/p>
&lt;p>Consensus 持久化与一致性&lt;/p>
&lt;p>Ensuring all nodes are in agreement,which prevents fault processes from running and ensures consistency and replication of data and processes&lt;/p>
&lt;p>确保所有节点都成功执行，避免运行实例副本数据持久化失败&lt;/p>
&lt;p>Partitioning 分区机制&lt;/p>
&lt;p>Dividing data across different nodes within systems, which reduces reliance on pure replication （Vertical Shading &amp;amp; Horizontal Shading）&lt;/p>
&lt;p>可以去数据进行水平分片，减少对副本的依赖&lt;/p>
&lt;p>Distributed transactions 分布式事务&lt;/p>
&lt;p>Once consensus is reached, transactions from applications need to be committed across databases with fault checks by each resource involved&lt;/p>
&lt;p>为了达成一致，要协调多个数据库之间进行失败检测&lt;/p>
&lt;p>Caching缓存&lt;/p>
&lt;p>Making tradeoffs and caching decisions to determine what should be stored in a cache, how to direct traffic to a cache,and how to ensure we have the appropriate data in the cache&lt;/p>
&lt;p>考虑是否需要引入缓存 包括确认哪些数据需要缓存&lt;/p>
&lt;p>&lt;img src="https://theoriz0.github.io/images/system-design-cheat-sheet.png"
loading="lazy"
>&lt;/p></description></item><item><title>通过Rclone + 对象存储实现同步盘</title><link>https://theoriz0.github.io/posts/my-rclone-cos/</link><pubDate>Thu, 09 Nov 2023 10:23:52 +0800</pubDate><guid>https://theoriz0.github.io/posts/my-rclone-cos/</guid><description>&lt;h2 id="下载安装">下载安装&lt;/h2>
&lt;p>&lt;a class="link" href="https://rclone.org/downloads/" target="_blank" rel="noopener"
>https://rclone.org/downloads/&lt;/a>
s
如果需要挂载为磁盘，windows下需要安装winfsp：https://winfsp.dev/rel/&lt;/p>
&lt;h2 id="配置cos">配置cos：&lt;/h2>
&lt;p>rclone config&lt;/p>
&lt;p>腾讯云：
&lt;a class="link" href="https://rclone.org/s3/#tencent-cos" target="_blank" rel="noopener"
>https://rclone.org/s3/#tencent-cos&lt;/a>&lt;/p>
&lt;p>阿里云
&lt;a class="link" href="https://rclone.org/s3/#alibaba-oss" target="_blank" rel="noopener"
>https://rclone.org/s3/#alibaba-oss&lt;/a>&lt;/p>
&lt;h2 id="使用假设配置将存储环境命名为cos">使用（假设配置将存储环境命名为cos）：&lt;/h2>
&lt;p>列出桶：rclone lsd cos&lt;/p>
&lt;p>本地同步COS：rclone sync local-folder cos:bucket-name/folder&lt;/p>
&lt;p>COS同步本地：rclone sync cos:bucket-name/folder local-folder&lt;/p>
&lt;p>同步前，建议使用 &amp;ndash;dry-run 参数，确认哪些文件将会被删除和下载，避免不必要的资源浪费。&lt;/p>
&lt;h2 id="其他命令">其他命令&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>rclone mkdir cos:rclone-test-1251668577，创建存储桶rclone-test-1251668577
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone ls cos:rclone-test-1251668577，列出rclone-test-1251668577根目录下的文件
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone copy local-folder/ cos:rclone-test-1251668577/，拷贝本地文件或目录到COS上，不会删除目的端的其他文件
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone copy cos:rclone-test-1251668577 cos:rclone-test-backup-1251668577，同一个存储，在服务端使用copy操作拷贝文件
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone sync local-folder/ cos:rclone-test-1251668577/ --backup-dir cos:rclone-test-backup-1251668577/20191011，将本地文件同步到cos，并备份被删除或修改的文件到备份存储桶中
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone copy --max-age 24h --progress --no-traverse local-folder/ cos:rclone-test-1251668577/，--max-age 24h过滤出来最近24小时变更过的文件，--progress显示拷贝进度，--no-traverse在从源拷贝少量文件到目的中大量目的文件时，速度会更快
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone check local-folder/ cos:rclone-test-1251668577/ --one-way，查看本地文件是否都同步到了目的端，默认校验修改时间和大小
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone --min-size 500B lsl cos:rclone-test-1251668577/，查看存储桶中500B以上的文件列表
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone --dry-run --min-size 300B delete cos:rclone-test-1251668577/，查看存储桶中500B以上的待删除文件列表
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone delete oss:oss-test-bucket-1215715707/ --include&lt;span style="color:#f92672">=&lt;/span>/stl-views.gdb，删除根目录下的stl-views.gdb文件，如果不带/前缀，则会删除所有stl-views.gdb文件
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone size cos:rclone-test-1251668577/，查看存储桶中对象数目和占用的空间大小
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone mount cos:rclone-test-1251668577/ rclone-mnt/，将cos挂载成一个本地文件系统
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone ncdu cos:rclone-test-1251668577/，一个简易文本形式的文件浏览器，用于存储桶中的文件浏览、文件和文件夹删除等操作
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone cat cos:rclone-test-1251668577/test.cpp --head 10，输出test.cpp的前10个字节
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;hello world&amp;#34;&lt;/span> |rclone rcat cos:rclone-test-1251668577/rcat.txt将标准输出复制到存储桶的rcat.txt文件中，会覆盖目标文件
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone sync oss:oss-test-bucket-1215715707/ cos:rclone-test-1251668577/ -P，同步oss存储桶中的数据到cos存储桶中，-P选项显示进度
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone check oss:oss-test-bucket-1215715707/ cos:rclone-test-1251668577/ -P，进行数据对比校验
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone md5sum cos:rclone-test-1251668577/，为所有文件生成MD5值
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rclone tree cos:rclone-test-1251668577/ -C -D，显示文本格式的目录树结构，-C选项带颜色显示，-D显示上次修改时间
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考资料">参考资料&lt;/h2>
&lt;p>&lt;a class="link" href="https://cloud.tencent.com/developer/article/1520867" target="_blank" rel="noopener"
>https://cloud.tencent.com/developer/article/1520867&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://rclone.org/" target="_blank" rel="noopener"
>https://rclone.org/&lt;/a>&lt;/p></description></item><item><title>My Git Cheatsheet</title><link>https://theoriz0.github.io/posts/my-git-cheatsheet/</link><pubDate>Sun, 05 Nov 2023 16:45:52 +0800</pubDate><guid>https://theoriz0.github.io/posts/my-git-cheatsheet/</guid><description>&lt;h2 id="git-stash">git stash&lt;/h2>
&lt;p>git stash save &amp;ldquo;save message&amp;rdquo; : 执行暂存
（1）git stash save &amp;ldquo;save message&amp;rdquo; : 执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。&lt;/p>
&lt;p>（2）git stash list ：查看stash了哪些存储&lt;/p>
&lt;p>（3）git stash show ：显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}&lt;/p>
&lt;p>（4）git stash show -p : 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show stash@{$num} -p ，比如第二个：git stash show stash@{1} -p&lt;/p>
&lt;p>（5）git stash apply :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1}&lt;/p>
&lt;p>（6）git stash pop ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}&lt;/p>
&lt;p>（7）git stash drop stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储&lt;/p>
&lt;p>（8）git stash clear ：删除所有缓存的stash&lt;/p>
&lt;p>没有在git 版本控制中的文件，是不能被git stash 存起来的。如果新文件需要暂存，先执行下git add 加到git版本控制中。&lt;/p>
&lt;p>git checkout 不会清除不冲突的文件？
如果要清除：git clean -xdf
-n 不实际删除，只是进行演练，展示将要进行的操作，有哪些文件将要被删除。（可先使用该命令参数，然后再决定是否执行）&lt;/p>
&lt;h2 id="git-reset">git reset&lt;/h2>
&lt;p>git reset &amp;ndash;hard HASH #返回到某个节点，不保留修改，已有的改动会丢失。
git reset &amp;ndash;soft HASH #返回到某个节点, 保留修改，已有的改动会保留，在未提交中，git status或git diff可看。&lt;/p>
&lt;h2 id="submodule">submodule&lt;/h2>
&lt;p>git clone &amp;ndash;recurse-submodules, or run git submodule update &amp;ndash;init &amp;ndash;recursive&lt;/p></description></item><item><title>常用的一些应用</title><link>https://theoriz0.github.io/posts/my-tool-apps/</link><pubDate>Sun, 05 Nov 2023 16:35:24 +0800</pubDate><guid>https://theoriz0.github.io/posts/my-tool-apps/</guid><description>&lt;h2 id="语音转文字">语音转文字&lt;/h2>
&lt;p>讯飞：准确度略高，通过声纹可以区分说话人，贵。重要音频可以用。
Whisper：开源，免费，无法区分说话人。
&lt;a class="link" href="https://github.com/Const-me/Whisper" target="_blank" rel="noopener"
>Win客户端&lt;/a> | &lt;a class="link" href="https://huggingface.co/ggerganov/whisper.cpp/tree/main" target="_blank" rel="noopener"
>对应模型&lt;/a>（作者推荐 ggml-medium.bin）
Python环境可以使用&lt;a class="link" href="https://github.com/m-bain/whisperX" target="_blank" rel="noopener"
>WhisperX&lt;/a>&lt;/p>
&lt;h2 id="ocr">OCR&lt;/h2>
&lt;p>白描：&lt;/p>
&lt;h2 id="图表绘制">图表绘制&lt;/h2>
&lt;p>Markdown + &lt;a class="link" href="https://mermaid.js.org/intro/" target="_blank" rel="noopener"
>Mermaid&lt;/a>，画时序图很方表。
流程图：Draw.io&lt;/p>
&lt;h2 id="多媒体">多媒体&lt;/h2>
&lt;p>ffmpeg：
其实对于个人来说（至少对我），最常用的不是转码，甚至说反而是不去转码，而是无损的包装格式转换，音频抽取，剪切，合并。&lt;/p>
&lt;h2 id="多端同步">多端同步&lt;/h2>
&lt;p>Feem
Bark&lt;/p>
&lt;h2 id="字典">字典&lt;/h2>
&lt;p>汉语：新华字典、现代汉语词典、辞海
日语：新明解
英语：LDOCE 6
以及iOS、MacOS自带的字典们（无法从苹果全家桶抽身的重要原因）。&lt;/p>
&lt;h2 id="浏览器插件">浏览器插件&lt;/h2>
&lt;h2 id="mark">Mark&lt;/h2>
&lt;p>还没用，未来可能会尝试：
(Rustdesk)[https://rustdesk.com/index.html]：开源自建Teamviewer。&lt;/p></description></item><item><title>自有数据：我的私有云</title><link>https://theoriz0.github.io/posts/my-private-clouds/</link><pubDate>Sun, 05 Nov 2023 16:28:35 +0800</pubDate><guid>https://theoriz0.github.io/posts/my-private-clouds/</guid><description>&lt;h2 id="音乐">音乐&lt;/h2>
&lt;p>很多歌音乐由于被屏蔽/版权/地域原因未上架，所以建了ampache。客户端使用的是 Amperfy。
这样只要买apple music一个会员就可以了，不必在QQ/网易/Spotify之间来回切。
用了vmiss香港节点，因为便宜带宽大、流量多。国内免费的服务器那点带宽带流媒体卡的让人怀疑人生。&lt;/p>
&lt;h2 id="blog">Blog&lt;/h2>
&lt;p>Hugo + github.io&lt;/p>
&lt;h2 id="类twitter">类Twitter&lt;/h2>
&lt;p>想用Mongo的 Data API免费额度 + Netlify的免费额度，部署一个极简的twitter。自己部署的最大优势是未来整理时可以直接操作数据库，比在WebUI里来回请求http会快很多。&lt;/p>
&lt;h2 id="rclone--cos-同步盘">Rclone + COS 同步盘&lt;/h2>
&lt;p>通过Rclone + 对象存储实现同步盘。指令详见&lt;a class="link" href="https://theoriz0.github.io/posts/my-rclone-cos" target="_blank" rel="noopener"
>Rclone&lt;/a>&lt;/p></description></item><item><title>My Hugo Cheatsheet</title><link>https://theoriz0.github.io/posts/my-hugo-cheatsheet/</link><pubDate>Sun, 05 Nov 2023 16:09:58 +0800</pubDate><guid>https://theoriz0.github.io/posts/my-hugo-cheatsheet/</guid><description>&lt;h2 id="安装-hugo">安装 Hugo：&lt;/h2>
&lt;p>&lt;a class="link" href="https://gohugo.io/installation/" target="_blank" rel="noopener"
>Hugo - Install&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go install -tags extended github.com/gohugoio/hugo@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Mac 也可以使用Brew，省去配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install hugo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用-hugo">使用 Hugo&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo new posts/your-post.md
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hugo serve
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="hugo-图片">Hugo 图片&lt;/h2>
&lt;p>存放在 content/images 下。markdown中引用时：&lt;code>![](../../images/xxx.jpg)&lt;/code>&lt;/p>
&lt;h2 id="hugo-内链">Hugo 内链&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-markdown" data-lang="markdown">&lt;span style="display:flex;">&lt;span>[&lt;span style="color:#f92672">Hugo cheatsheet&lt;/span>](&lt;span style="color:#a6e22e">/posts/my-hugo-cheatsheet/&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>效果：&lt;a class="link" href="https://theoriz0.github.io/posts/my-hugo-cheatsheet/" >Hugo cheatsheet&lt;/a>&lt;/p>
&lt;h2 id="wsl无法预览问题解决">wsl无法预览问题解决&lt;/h2>
&lt;p>来源：&lt;a class="link" href="https://bestoko.cc/p/hugo_wsl2/" target="_blank" rel="noopener"
>Toko&amp;rsquo;s blog&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>hugo server --bind 172.20.3.63 --baseURL&lt;span style="color:#f92672">=&lt;/span>http://172.20.3.63
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ip地址可以通过 &lt;a class="link" href="https://theoriz0.github.io/posts/golang-wsl2-centos8-setup/#%e9%85%8d%e7%bd%aeclash%e6%88%96%e5%85%b6%e4%bb%96%e4%bb%a3%e7%90%86%e8%bd%af%e4%bb%b6" >golang-wsl&lt;/a> 中的 &lt;code>proxy ip&lt;/code> 命令获取&lt;/p></description></item><item><title>60 Points First</title><link>https://theoriz0.github.io/posts/60-points-first/</link><pubDate>Sun, 05 Nov 2023 16:04:12 +0800</pubDate><guid>https://theoriz0.github.io/posts/60-points-first/</guid><description>&lt;p>来源：&lt;a class="link" href="https://www.bilibili.com/video/BV11H4y1R7Pm/" target="_blank" rel="noopener"
>Bilibili&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>我的加州理工教授告诉我60分更重要
硅谷有一句名言叫
move fast and break things
意思就是说要快速的行动
即便事情会被搞砸
每个人每天都有很多事情要执行
但是执行起来会很慢
因为感觉自己所具备条件不够完美
或者计划还不够周全
就会担心失败
担心做不到100分
所以迟迟都不会行动
其实我在刚开始读博的时候
每次做一件事情之前都喜欢暗示自己
要尽可能做到完美
这样最大影响就是给自己不必要的压力
让自己迟迟不能开始行动
其实100分根本不重要
60分才重要
因为60分至少让你有开始行动的动力
做一件100分事情的经历
可以帮你完成5件60分的事情
哪个对你帮助会更大呢
&lt;/code>&lt;/pre>&lt;p>完美重要吗？比如这篇文章的markdown排版。
事情很多的时候更要把精力集中在重要的事情上。&lt;/p>
&lt;p>过早优化是万恶之源 —— 克努特优化原则。&lt;/p>
&lt;p>松弛 (Relaxation)：&lt;/p>
&lt;p>A relaxation is an approximation of a difficult problem by a nearby problem that is easier to solve. A solution of the relaxed problem provides information about the original problem. from &lt;a class="link" href="https://en.wikipedia.org/wiki/Relaxation_%28approximation%29" target="_blank" rel="noopener"
>Wikipedia&lt;/a>&lt;/p></description></item><item><title>My FFmpeg Cheatsheet</title><link>https://theoriz0.github.io/posts/my-ffmpeg-cheatsheet/</link><pubDate>Sun, 05 Nov 2023 15:45:31 +0800</pubDate><guid>https://theoriz0.github.io/posts/my-ffmpeg-cheatsheet/</guid><description>&lt;h1 id="ffmpeg">ffmpeg&lt;/h1>
&lt;h2 id="格式转换">格式转换&lt;/h2>
&lt;pre tabindex="0">&lt;code>ffmpeg -i A.mkv A.mp4
&lt;/code>&lt;/pre>&lt;h2 id="复制流">复制流&lt;/h2>
&lt;pre tabindex="0">&lt;code>ffmpeg -i input.mkv -codec copy output.mp4
&lt;/code>&lt;/pre>&lt;h2 id="视频转换音频">视频转换音频&lt;/h2>
&lt;pre tabindex="0">&lt;code>$ ffmpeg -i .\Revenge.webm demo.mp3 #将 Revenge.webm 这个 MV 转换成了 mp3 歌曲
&lt;/code>&lt;/pre>&lt;h2 id="抽取音频命令">抽取音频命令&lt;/h2>
&lt;pre tabindex="0">&lt;code>ffmpeg -i 3.mp4 -vn -y -acodec copy 3.aac
ffmpeg -i 3.mp4 -vn -y -acodec copy 3.m4a
&lt;/code>&lt;/pre>&lt;h2 id="剪切">剪切&lt;/h2>
&lt;pre tabindex="0">&lt;code>ffmpeg -ss 00:00:00 -t 00:00:30 -i test.mp4 -vcodec copy -acodec copy output.mp4
* -ss 指定从什么时间开始（hh:mm:ss）
* -t 指定需要截取多长时间
* -i 指定输入文件
&lt;/code>&lt;/pre>&lt;h2 id="合并非-mpeg-1-mpeg-2-ps-dv">合并（非 MPEG-1, MPEG-2 PS, DV)&lt;/h2>
&lt;p>Use this method when you want to avoid a re-encode and your format does not support file-level concatenation (most files used by general users do not support file-level concatenation).&lt;/p>
&lt;pre tabindex="0">&lt;code>$ cat mylist.txt
file &amp;#39;/path/to/file1&amp;#39;
file &amp;#39;/path/to/file2&amp;#39;
file &amp;#39;/path/to/file3&amp;#39;
$ ffmpeg -f concat -safe 0 -i mylist.txt -c copy output.mp4
&lt;/code>&lt;/pre>&lt;p>For Windows:&lt;/p>
&lt;pre tabindex="0">&lt;code>(echo file &amp;#39;first file.mp4&amp;#39; &amp;amp; echo file &amp;#39;second file.mp4&amp;#39; )&amp;gt;list.txt
ffmpeg -safe 0 -f concat -i list.txt -c copy output.mp4
&lt;/code>&lt;/pre>&lt;h2 id="合并-mpeg-1-mpeg-2-ps-dv">合并 (MPEG-1, MPEG-2 PS, DV)&lt;/h2>
&lt;p>Use this method with formats that support file-level concatenation (MPEG-1, MPEG-2 PS, DV). Do not use with MP4.&lt;/p>
&lt;pre tabindex="0">&lt;code>ffmpeg -i &amp;#34;concat:input1|input2&amp;#34; -codec copy output.mkv
&lt;/code>&lt;/pre>&lt;p>This method does not work for many formats, including MP4, due to the nature of these formats and the simplistic concatenation performed by this method.&lt;/p>
&lt;pre tabindex="0">&lt;code>ffmpeg -i input.flv -q:a 5 out.mp3
&lt;/code>&lt;/pre>&lt;p>flv 提取mp3&lt;/p>
&lt;h2 id="merge-m4s-video-and-audio">merge m4s video and audio&lt;/h2>
&lt;pre tabindex="0">&lt;code>ffmpeg -i video.m4s -i audio.m4s -c:v copy -c:a copy output.mp4
&lt;/code>&lt;/pre>&lt;h2 id="yuv录屏">yuv录屏&lt;/h2>
&lt;pre tabindex="0">&lt;code>ffmpeg -f gdigrab -t 15 -framerate 30 -i desktop -pix_fmt yuv420p -vcodec rawvideo -s 1920x1080 -y output.yuv
&lt;/code>&lt;/pre></description></item><item><title>Golang WSL2 CentOS8 开发环境配置指南</title><link>https://theoriz0.github.io/posts/golang-wsl2-centos8-setup/</link><pubDate>Wed, 11 Jan 2023 22:32:58 +0800</pubDate><guid>https://theoriz0.github.io/posts/golang-wsl2-centos8-setup/</guid><description>&lt;h2 id="获取-wsl-centos8">获取 WSL CentOS8&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/mishamosher/CentOS-WSL" target="_blank" rel="noopener"
>mishamosher/CentOS-WSL&lt;/a>&lt;/p>
&lt;h2 id="安装并启动-centos8">安装并启动 CentOS8&lt;/h2>
&lt;p>解压并运行&lt;code>CentOS8.exe&lt;/code>。&lt;/p>
&lt;p>Windows 命令行下运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 列出所有版本，确认 CentOS8 已安装成功&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl --list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 如果有多个发行版，可以将默认版本设为 CentOS8&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl -s CentOS8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 启动。如果设置了默认版本，可以忽略&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wsl -d CentOS8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="设置-root-用户密码">设置 root 用户密码&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>passwd root
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建普通用户并加入sudo组">创建普通用户并加入sudo组&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>useradd &lt;span style="color:#f92672">[&lt;/span>username&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>passwd &lt;span style="color:#f92672">[&lt;/span>username&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sed -i &lt;span style="color:#e6db74">&amp;#39;/^root.*ALL=(ALL).*ALL/a\[username]\tALL=(ALL) \tALL&amp;#39;&lt;/span> /etc/sudoers
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="替换-yum-源">替换 yum 源&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mv /etc/yum.repos.d /etc/yum.repos.d.bak &lt;span style="color:#75715e"># 先备份原有的 Yum 源&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir /etc/yum.repos.d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>yum clean all &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> yum makecache
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="修改-wsl-默认用户">修改 WSL 默认用户&lt;/h2>
&lt;p>WSL 下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vi /etc/wsl.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>文件内容为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>[user]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default=[username]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存后退出WSL，并在 Windows 下运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wsl --terminate CentOS8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重新启动 WSL，可以发现用户已经是所设置用户而不是root。&lt;/p>
&lt;h2 id="获取-windows-主机网络地址">获取 Windows 主机网络地址&lt;/h2>
&lt;p>WSL下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat /etc/resolv.conf |grep -oP &lt;span style="color:#e6db74">&amp;#39;(?&amp;lt;=nameserver\ ).*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>尝试ping该地址。&lt;/p>
&lt;p>如果不通，尝试在 Windows powershell 下放开 vEthernet (WSL) 这张网卡的防火墙，执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>New-NetFirewallRule -DisplayName &lt;span style="color:#e6db74">&amp;#34;WSL&amp;#34;&lt;/span> -Direction Inbound -InterfaceAlias &lt;span style="color:#e6db74">&amp;#34;vEthernet (WSL)&amp;#34;&lt;/span> -Action Allow
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置-homebashrc">配置 &lt;code>$HOME/.bashrc&lt;/code>&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># .bashrc&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Source global definitions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> -f /etc/bashrc &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> . /etc/bashrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># User specific environment&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> ! &lt;span style="color:#f92672">[[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$PATH&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span>~ &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$HOME&lt;span style="color:#e6db74">/.local/bin:&lt;/span>$HOME&lt;span style="color:#e6db74">/bin:&amp;#34;&lt;/span> &lt;span style="color:#f92672">]]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PATH&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$HOME&lt;span style="color:#e6db74">/.local/bin:&lt;/span>$HOME&lt;span style="color:#e6db74">/bin:&lt;/span>$PATH&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export PATH
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Uncomment the following line if you don&amp;#39;t like systemctl&amp;#39;s auto-paging feature:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># export SYSTEMD_PAGER=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># User specific aliases and functions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alias rm&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;rm -i&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alias cp&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cp -i&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alias mv&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;mv -i&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Create workspace folder if not exist&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> ! -d $HOME/workspace &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mkdir -p $HOME/workspace
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Basic envs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export LANG&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;en_US.UTF-8&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 设置系统语言为 en_US.UTF-8，避免终端出现中文乱码&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export PS1&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;[\u@dev \W]$ &amp;#39;&lt;/span> &lt;span style="color:#75715e"># 默认的 PS1 设置会展示全部的路径，为了防止过长，这里只展示：&amp;#34;用户名@dev 最后的目录名&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export WORKSPACE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>$HOME&lt;span style="color:#e6db74">/workspace&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 设置工作目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Default entry folder&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd $WORKSPACE &lt;span style="color:#75715e"># 登录系统，默认进入 workspace 目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Go envs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GOVERSION&lt;span style="color:#f92672">=&lt;/span>go1.19.4 &lt;span style="color:#75715e"># Go 版本设置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GO_INSTALL_DIR&lt;span style="color:#f92672">=&lt;/span>/usr/local/go &lt;span style="color:#75715e"># Go 安装目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GOROOT&lt;span style="color:#f92672">=&lt;/span>$GO_INSTALL_DIR/$GOVERSION &lt;span style="color:#75715e"># GOROOT 设置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GOPATH&lt;span style="color:#f92672">=&lt;/span>$WORKSPACE/golang &lt;span style="color:#75715e"># GOPATH 设置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export PATH&lt;span style="color:#f92672">=&lt;/span>$GOROOT/bin:$GOPATH/bin:$PATH &lt;span style="color:#75715e"># 将 Go 语言自带的和通过 go install 安装的二进制文件加入到 PATH 路径中&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GO111MODULE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;on&amp;#34;&lt;/span> &lt;span style="color:#75715e"># 开启 Go moudles 特性&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GOPROXY&lt;span style="color:#f92672">=&lt;/span>https://goproxy.cn,direct &lt;span style="color:#75715e"># 安装 Go 模块时，代理服务器设置&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GOPRIVATE&lt;span style="color:#f92672">=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export GOSUMDB&lt;span style="color:#f92672">=&lt;/span>off &lt;span style="color:#75715e"># 关闭校验 Go 依赖包的哈希值&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># proxy&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>alias proxy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;source ~/proxy.sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy set
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置clash或其他代理软件">配置clash或其他代理软件&lt;/h3>
&lt;p>详细可参考：&lt;a class="link" href="https://www.cnblogs.com/tuilk/p/16287472.html" target="_blank" rel="noopener"
>WSL2配置代理&lt;/a>&lt;/p>
&lt;p>开启代理软件的【allow lan/局域网】功能。&lt;/p>
&lt;p>WSL 下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export ALL_PROXY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://{ip}:{port}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 尝试访问google&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl google.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果不通，检查 Windows 下 clash 防火墙设置。&lt;/p>
&lt;p>如果成功，可以继续配置 &lt;code>proxy.sh&lt;/code> 方便后续使用 ,修改代理端口号为你代理软件的端口号。&lt;/p>
&lt;p>创建 &lt;code>proxy.sh&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>vi ~/proxy.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>内容为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>hostip&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>cat /etc/resolv.conf | grep nameserver | awk &lt;span style="color:#e6db74">&amp;#39;{ print $2 }&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wslip&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>hostname -I | awk &lt;span style="color:#e6db74">&amp;#39;{print $1}&amp;#39;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>port&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">7890&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>PROXY_HTTP&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>hostip&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">:&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>port&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>set_proxy&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> export http_proxy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>PROXY_HTTP&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> export HTTP_PROXY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>PROXY_HTTP&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> export https_proxy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>PROXY_HTTP&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> export HTTPS_proxy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>PROXY_HTTP&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> export ALL_PROXY&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>PROXY_SOCKS5&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> export all_proxy&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>PROXY_SOCKS5&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git config --global http.https://github.com.proxy &lt;span style="color:#e6db74">${&lt;/span>PROXY_HTTP&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git config --global https.https://github.com.proxy &lt;span style="color:#e6db74">${&lt;/span>PROXY_HTTP&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Proxy has been opened.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>unset_proxy&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unset http_proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unset HTTP_PROXY
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unset https_proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unset HTTPS_PROXY
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unset ALL_PROXY
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unset all_proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git config --global --unset http.https://github.com.proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> git config --global --unset https.https://github.com.proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Proxy has been closed.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ip&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;WSL IP:&amp;#34;&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>wslip&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Host IP:&amp;#34;&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>hostip&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>test_setting&lt;span style="color:#f92672">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Host IP:&amp;#34;&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>hostip&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;WSL IP:&amp;#34;&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>wslip&lt;span style="color:#e6db74">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Try to connect to Google...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> resp&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>curl -I -s --connect-timeout &lt;span style="color:#ae81ff">5&lt;/span> -m &lt;span style="color:#ae81ff">5&lt;/span> -w &lt;span style="color:#e6db74">&amp;#34;%{http_code}&amp;#34;&lt;/span> -o /dev/null www.google.com&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">${&lt;/span>resp&lt;span style="color:#e6db74">}&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span> &lt;span style="color:#f92672">]&lt;/span>; &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Proxy setup succeeded!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Proxy setup failed!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;set&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> set_proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">elif&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;unset&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> unset_proxy
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">elif&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;test&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> test_setting
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">elif&lt;/span> &lt;span style="color:#f92672">[&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&lt;/span>$1&lt;span style="color:#e6db74">&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ip&amp;#34;&lt;/span> &lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> echo &lt;span style="color:#e6db74">&amp;#34;Unsupported arguments.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使&lt;code>.bashrc&lt;/code>生效&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>source ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 yum 失败，可尝试关闭代理。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>proxy unset
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装常用依赖">安装常用依赖&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo yum -y install git make autoconf automake cmake perl-CPAN libcurl-devel libtool gcc gcc-c++ glibc-headers zlib-devel git-lfs telnet lrzsz jq expat-devel openssl-devel openssl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装go环境">安装go环境&lt;/h2>
&lt;p>（如果不需要 go 环境，可删去 .bashrc 的 GO 部分）&lt;/p>
&lt;p>确认.bashrc的$GOVERSION，如果安装不同版本，修改之。&lt;/p>
&lt;p>按照go官网下载go。&lt;a class="link" href="https://go.dev/dl/" target="_blank" rel="noopener"
>Go官网下载地址&lt;/a>&lt;/p>
&lt;p>解压:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>rm -rf /usr/local/go &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> tar -C /usr/local/go/$GOVERSION -xzf go1.19.4.linux-amd64.tar.gz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>详见 &lt;a class="link" href="https://go.dev/doc/install" target="_blank" rel="noopener"
>Go官网安装指南&lt;/a>。&lt;/p>
&lt;p>此时 go version应该能输出版本。&lt;/p>
&lt;h3 id="安装protoc">安装protoc&lt;/h3>
&lt;p>（最新版本在(github.com)[https://github.com/protocolbuffers/protobuf/releases)，可根据需要自行调整命令)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cd /tmp/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>wget https://github.com/protocolbuffers/protobuf/releases/download/v21.9/protobuf-cpp-3.21.9.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>tar -xvzf protobuf-cpp-3.21.9.tar.gz
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cd protobuf-3.21.9/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./autogen.sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./configure
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>make
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sudo make install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>protoc --version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在执行 autogen.sh 脚本时，如果遇到以下错误：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>configure.ac:48: installing &amp;#39;./install-sh&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>configure.ac:109: error: required file &amp;#39;./ltmain.sh&amp;#39; not found configure.ac:48: installing &amp;#39;./missing&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>benchmarks/Makefile.am: installing &amp;#39;./depcomp&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conformance/Makefile.am:362: warning: shell python --version 2&amp;gt;&amp;amp;1: non-POSIX variable name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conformance/Makefile.am:362: (probably a GNU make extension)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conformance/Makefile.am:372: warning: shell python --version 2&amp;gt;&amp;amp;1: non-POSIX variable name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>conformance/Makefile.am:372: (probably a GNU make extension)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>parallel-tests: installing &amp;#39;./test-driver&amp;#39;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>autoreconf: automake failed with exit status: 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以通过以下命令配置 libtoolize，并再次运行 autogen.sh 来解决：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>libtoolize --automake --copy --debug --force
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./autogen.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装配置-docker">安装配置 Docker&lt;/h2>
&lt;p>安装 docker desktop&lt;/p>
&lt;p>检查 docker desktop 设置，确保：&lt;/p>
&lt;ul>
&lt;li>&lt;code>General - Use the WSL2 ...&lt;/code> 选中&lt;/li>
&lt;li>&lt;code>Resource - WSL Integration：Enable integration...&lt;/code> 选中；指定的 WSL Distro（CentOS8）开关打开。&lt;/li>
&lt;/ul>
&lt;p>如果报 &lt;code>Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock&lt;/code>，可运行以下语句设置权限：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>sudo setfacl --modify user:&amp;lt;user name or ID&amp;gt;:rw /var/run/docker.sock
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(来源：&lt;a class="link" href="https://stackoverflow.com/questions/51342810/how-to-fix-dial-unix-var-run-docker-sock-connect-permission-denied-when-gro" target="_blank" rel="noopener"
>StackOverflow&lt;/a>)&lt;/p>
&lt;p>如果报&lt;code>failed to solve with frontend dockerfile.v0: failed to create LLB definition&lt;/code>，需在 docker desktop 中配置:&lt;/p>
&lt;ul>
&lt;li>docker engine: &lt;code>&amp;quot;features&amp;quot;: {&amp;quot;buildkit&amp;quot;: false },&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>并重新用&lt;code>setfacl&lt;/code>设置权限&lt;/p>
&lt;p>（来源：&lt;a class="link" href="https://blog.csdn.net/qq_41240287/article/details/125236997" target="_blank" rel="noopener"
>CSDN&lt;/a>）&lt;/p>
&lt;h2 id="创建默认-k8s-环境">创建默认 K8S 环境&lt;/h2>
&lt;p>在 Docker Desktop 中设置：&lt;/p>
&lt;ul>
&lt;li>Kubernetes：勾选 Enable Kubernetes&lt;/li>
&lt;/ul>
&lt;p>在 WSL 中检查 K8S 服务情况：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 关闭网络代理&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>proxy unset
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl version
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl cluster-info
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从 pod 中访问 WSL 资源时要使用 WSL 的 ip，而不是 localhost。获取方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>proxy ip
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">## 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hostname -I | awk &lt;span style="color:#e6db74">&amp;#39;{print $1}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="其他">其他&lt;/h2>
&lt;h3 id="如果-wsl-占用内存过大">如果 WSL 占用内存过大&lt;/h3>
&lt;p>在 Windows %UserProfile%目录下修改/新建 &lt;code>.wslconfig&lt;/code>，内容为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>[wsl2]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>memory=4GB
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注：goland WSL服务端 至少需要3.8GB内存&lt;/p>
&lt;h3 id="如果域名解析有问题">如果域名解析有问题&lt;/h3>
&lt;p>可以在/etc/resolv.conf添加&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span># aliyun dns
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nameserver 223.5.5.5
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nameserver 223.6.6.6
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="不建议关闭关闭自动创建-etcresolvconf">（不建议关闭）关闭自动创建 /etc/resolv.conf&lt;/h3>
&lt;p>不建议关闭，因为 proxy.sh 脚本通过读取该文件获取 WSL 下 Windows 的 host ip。&lt;/p>
&lt;p>新建文件：/etc/wsl.conf，内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-text" data-lang="text">&lt;span style="display:flex;">&lt;span>[network]generateResolvConf = false
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>关于这个博客</title><link>https://theoriz0.github.io/posts/about-this-blog/</link><pubDate>Wed, 11 Jan 2023 22:16:45 +0800</pubDate><guid>https://theoriz0.github.io/posts/about-this-blog/</guid><description>&lt;h2 id="说明">说明&lt;/h2>
&lt;p>博客工具：&lt;a class="link" href="https://gohugo.io" target="_blank" rel="noopener"
>Hugo&lt;/a>&lt;/p>
&lt;p>主题：&lt;del>&lt;a class="link" href="https://github.com/panr/hugo-theme-terminal" target="_blank" rel="noopener"
>terminal&lt;/a>&lt;/del> &lt;a class="link" href="https://github.com/CaiJimmy/hugo-theme-stack" target="_blank" rel="noopener"
>hugo-theme-stack&lt;/a>&lt;/p>
&lt;h2 id="如何使用">如何使用&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone --recurse-submodules https://github.com/theoriz0/theoriz0.github.io
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者clone后&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git submodule update --init --recursive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下载主题&lt;/p>
&lt;h2 id="hugo-常用操作">Hugo 常用操作&lt;/h2>
&lt;p>&lt;a class="link" href="https://theoriz0.github.io/posts/my-hugo-cheatsheet/" >Hugo cheatsheet&lt;/a>&lt;/p></description></item></channel></rss>